#include "mainwindow.h"
#include<QDebug>
#include <QProcess>
#include <QtNetwork/qnetworkinterface.h>
#include <QtNetwork/QHostAddress>
#include<QtNetwork/QTcpSocket>
#include<QDir>
#include<filecrud.h>
#include<QString>
#include<createbutton.h>
#include<QDataStream>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent)
{

    setWindowTitle("E-Ag 1.0");
    this->resize(900,700);

    lst=new QWidget(this);
    lst->resize(900,this->height()-350);
    lst->move(0,205);
    lst->hide();
    //lst->setStyleSheet("background-color: #a3a3a3");
    //auto
    layout = new QGridLayout();
    layout->setContentsMargins(0, 0, 0,0);
    layout->setSpacing(2);
    lst->setLayout(layout);

    bar=new QProgressBar(this);
    bar->resize(900,30);
    bar->move(0,500);
    bar->hide();

    pcIp=new QLabel(this);
    pcIp->resize(250,30);
    pcIp->move(260,45);

    pcName=new QLabel(this);
    pcName->resize(250,30);
    pcName->move(380,45);

    pcMac=new QLabel(this);
    pcMac->resize(250,30);
    pcMac->move(500,45);


    socketNumberLabel=new QLabel(this);
    socketNumberLabel->resize(250,30);
    socketNumberLabel->move(750,45);

    le=new QLineEdit(this);
    le->resize(150,30);
    le->move(500,10);

    hostAddressButtonSlot();
    QLabel *leLabel=new QLabel(this);
    leLabel->resize(240,30);
    leLabel->move(260,10);
    leLabel->setText("Broadcast Adresi("+broadCastAddress+")");


    QLabel *userLabel=new QLabel(this);
    userLabel->resize(240,30);
    userLabel->move(20,10);
    userLabel->setText("Kullanıcı Adı");

    username=new QLineEdit(this);
    username->resize(150,30);
    username->move(100,10);

    QLabel *passwordLabel=new QLabel(this);
    passwordLabel->resize(200,30);
    passwordLabel->move(20,45);
    passwordLabel->setText("Şifre");

    password=new QLineEdit(this);
    password->resize(150,30);
    password->move(100,45);
    password->setEchoMode(QLineEdit::Password);


    QLabel *commandLabel=new QLabel(this);
    commandLabel->resize(350,30);
    commandLabel->move(20,80);
    commandLabel->setText("Komut");

    command=new QLineEdit(this);
    command->resize(600,30);
    command->move(100,80);


    QLabel *fileLabel=new QLabel(this);
    fileLabel->resize(200,30);
    fileLabel->move(20,115);
    fileLabel->setText("Dosya");

    filePath=new QLineEdit(this);
    filePath->resize(600,30);
    filePath->move(100,115);


    createTable();
    tw->hide();
    //lst->show();
    listePcSlot();
    createButton();
    textBrowser_receivedMessages=new QTextBrowser(this);
    textBrowser_receivedMessages->resize(this->width(),100);
    textBrowser_receivedMessages->move(0,this->height()-100);
    textBrowser_receivedMessages->setStyleSheet("background-color: #a3a3a3");

    /*******************************************************/
  /*  comboBox_receiver=new QComboBox(this);
    comboBox_receiver->resize(250,40);
    comboBox_receiver->move(100,this->height()-145);
    comboBox_receiver->addItem("Broadcast");
    */

    lineEdit_message=new QLineEdit(this);
    lineEdit_message->resize(520,40);
    lineEdit_message->move(150,this->height()-145);
    destlabel=new QLabel(this);
    destlabel->resize(120,40);
    destlabel->setText("Hedef Pc");
    destlabel->move(20,this->height()-145);

    m_server = new QTcpServer();
    /**********************host ve port okunuyor*****************************/
     FileCrud *fcc=new FileCrud();
     fcc->dosya="hostport";
     QString ip="127.0.0.1";
     QString port="7879";
     if(fcc->fileExists())
     {
         QString hostport=fcc->fileGetLine(1);

         if (hostport!="")
         {

             //qDebug()<<hostport.split("|")[0]<<hostport.split("|")[1];
              ip=hostport.split("|")[0];
              port=hostport.split("|")[1];
             //socket->connectToHost(ip,port.toInt());
         }
     }
     /******************************************************/

    if(m_server->listen(QHostAddress::Any, port.toInt()))
    {
       connect(this,SIGNAL(newMessage(QString)),this,SLOT(displayMessage(QString)));
       connect(m_server, SIGNAL(newConnection()), this, SLOT(newConnection()));

      // this->ui->statusBar->showMessage("Server is listening...");
       mesajSlot("Server is listening...");
       FileCrud *fc=new FileCrud();
       fc->dosya="iplist";
       fc->fileRemove();
    }
    else
    {
        QMessageBox::critical(this,"QTCPServer",QString("Unable to start the server: %1.").arg(m_server->errorString()));
        exit(EXIT_FAILURE);
    }
    /*********************************************************/

}

void MainWindow::fileSelectSlot()
{
    QString fileName = QFileDialog::getOpenFileName(this,tr("Dosya Seç"),"/home/etapadmin/", tr("Files (*.*)"));
//qDebug()<<fileName;
    filePath->setText(fileName);

}
void MainWindow::fileCopySlot()
{
    //sshpass -p $parola scp $dosya $username@$name:/home/$username/
    QString komut="sshpass -p "+password->text()+" scp "+filePath->text()+" "+
            username->text()+"@"+pcIp->text()+":\/home\/"+username->text()+"\/";

    qDebug()<<komut;
    QStringList arguments;
    //QString  komut;
    //komut.append("vncviewer ").append(pcIp->text()).append(" \-passwd \/usr\/bin\/x11vncpasswd");
    arguments << "-c" << komut;
    QProcess process;
    process.start("/bin/bash",arguments);
    process.waitForFinished(-1); // will wait forever until finished

}
void MainWindow::fileCopyAllSlot()
{
    qDebug()<<"Komut Ağ'da Çalıştırıldı";

    FileCrud *fc=new FileCrud();
    fc->dosya="iplistname";

/*********************************************************/
   for(int i=1;i<=fc->fileCount();i++)
   {
       QString line=fc->fileGetLine(i);
       line.chop(1);
       QStringList lst=line.split("|");

      // qDebug()<<lst[0]<<lst[3];
                if (lst[3]=="sshopen")//sshstate
                    {
                    //sshpass -p $parola scp $dosya $username@$name:/home/$username/
                      QString komut="sshpass -p "+password->text()+" scp "+filePath->text()+" "+
                            username->text()+"@"+lst[0]+":\/home\/"+username->text()+"\/";

                    qDebug()<<komut;
                    QStringList arguments;
                    //QString  komut;
                    //komut.append("vncviewer ").append(pcIp->text()).append(" \-passwd \/usr\/bin\/x11vncpasswd");
                    arguments << "-c" << komut;
                    QProcess process;
                    process.start("/bin/bash",arguments);
                    process.waitForFinished(-1); // will wait forever until finished

                    }

     }

    /*

    FileCrud *fc=new FileCrud();
    fc->dosya="iplist";
    //fc->fileRead();
   // qDebug()<<fc->fileCount();
    FileCrud *fcc=new FileCrud();
    fcc->dosya="iplistname";

auto layout = new QGridLayout();
layout->setContentsMargins(0, 0, 0,0);
layout->setSpacing(2);
lst->setLayout(layout);

/*********************************************************/
/*    int sira=0;
    sira=fcc->fileCount();
    int satir=sira/4;
    int sutun=4;
    if ((sira-sutun*satir)!=0) satir++;
    int sn=0;
    for(int i=1;i<=satir;i++)
    {
        for(int j=1;j<=4;j++)
        {
            QString line=fcc->fileGetLine(sn+1);
            line.chop(1);
            int mx=line.lastIndexOf(QRegExp(">"));      // returns (
            int mn=line.lastIndexOf(QRegExp("<"));      //returns  )
             QString ip = line.mid(0, mx);
             QString mac = line.mid(mx+1,mn-mx-1);
             QString pcname=line.mid(mn+1);
             palette = new QPalette();
                if (fc->fileSearch(mac)!="")
                    {
                    //sshpass -p $parola scp $dosya $username@$name:/home/$username/
                      QString komut="sshpass -p "+password->text()+" scp "+filePath->text()+" "+
                            username->text()+"@"+ip+":\/home\/"+username->text()+"\/";

                    qDebug()<<komut;
                    QStringList arguments;
                    //QString  komut;
                    //komut.append("vncviewer ").append(pcIp->text()).append(" \-passwd \/usr\/bin\/x11vncpasswd");
                    arguments << "-c" << komut;
                    QProcess process;
                    process.start("/bin/bash",arguments);
                    process.waitForFinished(-1); // will wait forever until finished


                    }
                else
                {
                }
                sn++;
                if (sira==sn) break;
        }
     }*/
    qDebug()<<"Dosya Ağ'da Bütün Pc'lere Kopyalandı";

}
void MainWindow::commandExecuteAllSlot()
{

    FileCrud *fc=new FileCrud();
    fc->dosya="iplistname";

/*********************************************************/
   for(int i=1;i<=fc->fileCount();i++)
   {
       QString line=fc->fileGetLine(i);
       line.chop(1);
       QStringList lst=line.split("|");

     //  qDebug()<<lst[0];
                if (lst[3]=="sshopen")//sshstate
                    {
                     //sshpass -p $parola ssh -o StrictHostKeyChecking=no -n $username@$name "echo $parola | sudo -S" $komut
                QString komut="sshpass -p "+password->text()+" ssh -o StrictHostKeyChecking=no -n "+
                        username->text()+"@"+lst[0]+" 'echo "+password->text()+" | sudo -S' "+command->text();
                //qDebug()<<komut;
                QStringList arguments;
                arguments << "-c" << komut;
                QProcess process;
                process.start("/bin/bash",arguments);
                process.waitForFinished(-1); // will wait forever until finished

                    }

     }
    qDebug()<<"Komut Ağ'da Çalıştırıldı";


}

void MainWindow::commandExecuteSlot()
{
    //sshpass -p $parola ssh -o StrictHostKeyChecking=no -n $username@$name "echo $parola | sudo -S" $komut
QString komut="sshpass -p "+password->text()+" ssh -o StrictHostKeyChecking=no -n "+
        username->text()+"@"+pcIp->text()+" 'echo "+password->text()+" | sudo -S' "+command->text();

qDebug()<<komut;
QStringList arguments;
//QString  komut;
//komut.append("vncviewer ").append(pcIp->text()).append(" \-passwd \/usr\/bin\/x11vncpasswd");
arguments << "-c" << komut;
QProcess process;
process.start("/bin/bash",arguments);
process.waitForFinished(-1); // will wait forever until finished


}

void MainWindow::listePcSlot()
{
    /*lst=new QWidget(this);
    lst->resize(900,this->height()-30);
    lst->move(0,250);
    lst->hide();*/

    tw->hide();
    lst->show();
  pcListeGuncelleSlot();
}

void MainWindow::pcListeGuncelleSlot()
{
    FileCrud *fcc=new FileCrud();
    fcc->dosya="iplistname";

/*****************************************/
    /*QStringList list;
    list << "Ahmet" << "Ziya" << "Kamil" << "Selda" << "Belin";
    qSort(list.begin(), list.end());
    qDebug() << list;
*/
    QStringList list;
    for(int i=1;i<=fcc->fileCount();i++)
    {
         QString line=fcc->fileGetLine(i);
         if(line!="")
         {
             line.chop(1);
             QStringList lst=line.split("|");
             list <<lst[5]+"|"+lst[0]+"|"+lst[1]+"|"+lst[2]+"|"+lst[3]+"|"+lst[4];
         }
    }
       qSort(list.begin(), list.end());
    //qDebug() << list.count();

/*********************************************************/
   int sira=0;

            sira=list.count();
    int satir=sira/8;
    int sutun=8;
    if ((sira-sutun*satir)!=0) satir++;
    int sn=0;
    for(int i=1;i<=satir;i++)
    {
        for(int j=1;j<=8;j++)
        {
            QString line=list[sn];
            //line.chop(1);

            QStringList ls=line.split("|");
             palette = new QPalette();
                if (ls[3]=="pcopen") //pcstate
                    {
                    QString btnLabel="";
                    btnLabel=ls[0]+"\n\n";

                    if(ls[4]=="sshclose"&&ls[5]=="vncclose")  btnLabel=btnLabel+"___--___";
                    if(ls[4]=="sshopen"&&ls[5]=="vncclose") btnLabel=btnLabel+"ssh--___";
                    if(ls[4]=="sshclose"&&ls[5]=="vncopen") btnLabel=btnLabel+"___--vnc";
                    if(ls[4]=="sshopen"&&ls[5]=="vncopen") btnLabel=btnLabel+"ssh--vnc";

                   palette->setColor(QPalette::Button, QColor(0,255,0,255));
                   QPushButton *btnpc=new QPushButton(lst);
                   btnpc->setFixedSize(100, 40);
                   btnpc->setIconSize(QSize(100,40));
                    // btnpc->setFlat(true);
                   btnpc->setText(btnLabel); //pcname
                   btnpc->setPalette(*palette);
                   btnpc->setAutoFillBackground(true);
                   btnpc->setToolTip(ls[2]);
                   layout->addWidget(btnpc, i,j,1,1);
                   connect(btnpc, &QPushButton::clicked, [=]() {
                       QString ln=fcc->fileSearch(btnpc->toolTip());
                       ln.chop(1);
                       QStringList linels=ln.split("|");
                       pcIp->setText(linels[0]);
                       pcMac->setText(linels[1]);
                       pcName->setText(linels[5]);
                       QString linesocketnumber=listGetLine(onLinePcList,linels[1]);
                       if(linesocketnumber!="")
                       {
                           //qDebug()<<linesocketnumber;
                         socketNumberLabel->setText(linesocketnumber.split("|")[linesocketnumber.split("|").count()-2]);
                       destlabel->setText("Hedef("+linels[5]+")");
                       }
                       vncConnectButton->setEnabled(true);
                       sshConnectButton->setEnabled(true);
                       ftpConnectButton->setEnabled(true);
                       sendMessageButton->setEnabled(true);
                       hostTableListSaveButton->setEnabled(true);
                       fileCopyButton->setEnabled(true);
                       commandExecuteButton->setEnabled(true);
                       });
                    }
                else
                {
                    QString btnLabel="";
                    btnLabel=ls[0]+"\n\n";
                    btnLabel=btnLabel+"___--___";
                    palette->setColor(QPalette::Button, QColor(255,0,0,255));
                    QPushButton *btnpc=new QPushButton(lst);
                    btnpc->setFixedSize(100, 40);
                    btnpc->setIconSize(QSize(100,40));
                   // btnpc->setFlat(true);
                    btnpc->setText(btnLabel); //pcname
                    btnpc->setPalette(*palette);
                    btnpc->setAutoFillBackground(true);
                    btnpc->setToolTip(ls[2]);
                    layout->addWidget(btnpc, i,j,1,1);
                    connect(btnpc, &QPushButton::clicked, [=]() {
                        QString ln=fcc->fileSearch(btnpc->toolTip());
                        ln.chop(1);
                        QStringList linels=ln.split("|");
                        pcIp->setText(linels[0]);
                        pcMac->setText(linels[1]);
                        pcName->setText(linels[5]);
                        socketNumberLabel->setText("");
                        /******************buton ayarları**********************/
                        vncConnectButton->setEnabled(false);
                        sshConnectButton->setEnabled(false);
                        ftpConnectButton->setEnabled(false);
                        sendMessageButton->setEnabled(false);
                        hostTableListSaveButton->setEnabled(false);
                        fileCopyButton->setEnabled(false);
                        commandExecuteButton->setEnabled(false);
                        });

                }
                sn++;
                if (sira==sn) break;
        }
     }
    //qDebug()<<"Pc'ler Listelendi";
    //  mesajSlot("Bilgisayarlar Listelendi!");

}

void MainWindow::barStatusSlot()
{
     bar->setValue(barValue++);
 }

void MainWindow::hostAddressButtonSlot()
{
    QHostAddress localhost = QHostAddress(QHostAddress::LocalHost);
        for (const QHostAddress &address: QNetworkInterface::allAddresses()) {
            if (address.protocol() == QAbstractSocket::IPv4Protocol && address != localhost)
               {
                //  qDebug() <<"deenem"<< address.toString();

            QString adres=address.toString();


            adres.chop(3);
          //  adres.append("255");
              adres.append("*");
           // qDebug()<<adres;
            broadCastAddress=adres;
           // le->setText(adres);
            return;
            }
        }
}

void MainWindow::agTaraButtonSlot()
{
  //  qDebug()<<"Tarama Başlatıldı";
    mesajSlot("Ağ Taramassı Başlatıldı!");
    /*barValue=0;
    bar->show();
    bar->setValue(barValue);
    this->update();
    QTimer *barTimer = new QTimer(this);
    connect(barTimer, SIGNAL(timeout()), this, SLOT(barStatusSlot()));
    barTimer->start(1000);
*/
    QString leip;
    if (le->text()!="")
    {
        leip=le->text();
       // leip.chop(3);
    }
    else
    {
        leip=broadCastAddress;
       // leip.chop(3);
    }

    QStringList arguments;
    QString  komut;
   // qDebug()<<leip;
    //+" 'echo "+password->text()+" | sudo -S' "+
    komut.append("echo ").append(password->text()).append(" | sudo -S ").append("nmap  -sn ").append(leip).append(" | awk '/Nmap scan report/{  printf $5;printf \"|\";getline;getline;printf $3;printf \"|\";print $4;}'|grep -v \"report\">"+QDir::homePath()+"/iplist");
   // qDebug()<<komut;
    arguments << "-c" << komut;
    //sudo nmap -n -sP 10.107.248.* | awk '/Nmap scan report/{printf $5;printf ":";getline;getline;print $3}'>iplist
    // arguments << "-c" << "nmap  -sn 192.168.23.\\*";
    QProcess process;
    process.start("/bin/bash",arguments);
    process.waitForFinished(); // will wait forever until finished
    //qDebug()<<"Tarama Tamamlandı";
    mesajSlot("Ağ Taraması Tamamlandı!");
      pcAramaButtonSlot();

    //tw->show();
    hostTableListButtonSlot();
    hostTableListSaveButtonSlot();
    //pcOpenSave();
    //sshAramaButtonSlot();
   // vncAramaButtonSlot();
    listePcSlot();
    //hostTableListButtonSlot();
  //  lst->hide();
   // tw->show();

    //barTimer->stop();
   // bar->hide();
    /*********************************************************/

}

void MainWindow::pcAramaButtonSlot()
{
    /********************ip dosyası oluşturuluyor *************************************/
 FileCrud *fc=new FileCrud();
 fc->dosya="iplist";
 FileCrud *fcc1=new FileCrud();
 fcc1->dosya="ip";
 fcc1->fileRemove();
 for(int i=1;i<=fc->fileCount();i++)
 {
     QString line=fc->fileGetLine(i);
     QStringList lst=line.split("|");
     if( lst[1]!="") fcc1->fileWrite(lst[0]); //ip dosyası yazılıyor
 }
// qDebug()<<"ip Dosyası Oluşturldu!";
 mesajSlot("Ip Dosyası Oluşturuldu.");
 //hostTableListButtonSlot();
// hostTableListSaveButtonSlot();

 pcOpenSave();

 pcListeGuncelleSlot();
}

void MainWindow::sshAramaButtonSlot()
{
    //editRowColum("00:09:DF:8D:53:5D",2,"pcclose");



   mesajSlot("ssh Tarama Başlatıldı");
    //myTextEdit->setTextCursor (&prev_cursor);
// qDebug()<<"ssh Tarama Başlatıldı";
    //te->setText(te->text()+"\n"+"selam");
    /*barValue=0;
    bar->show();
    bar->setValue(barValue);
    this->update();
    QTimer *barTimer = new QTimer(this);
    connect(barTimer, SIGNAL(timeout()), this, SLOT(barStatusSlot()));
    barTimer->start(1000);
*/
    QStringList arguments;
    QString  komut;
//    echo '1'|sudo -S nmap  -n -p 22,5900  -iL ip | awk '/Nmap scan report/{print $5;}'

    komut.append("echo ").append(password->text()).append(" | sudo -S ").append("nmap  -n -p 22 --open ").append("-iL "+QDir::homePath()+"/ip").append(" | awk '/Nmap scan report/{print $5;}'>"+QDir::homePath()+"/sshiplist");

    //qDebug()<<komut;
    arguments << "-c" << komut;
     QProcess process;
    process.start("/bin/bash",arguments);
    process.waitForFinished(-1); // will wait forever until finished
    //QString stdout = process.readAllStandardOutput();
   // qDebug()<<"ssh Tarama Tamamlandı";
    mesajSlot("ssh Tarama Tamamlandı");
   // hostListSaveButtonSlot();
    sshOpenSave();
    //hostTableListButtonSlot();

   // lst->hide();
    //tw->show();

    //barTimer->stop();
   // bar->hide();
    /*********************************************************/
listePcSlot();
}

void MainWindow::vncAramaButtonSlot()
{
   // qDebug()<<"vnc Tarama Başlatıldı";
    mesajSlot("vnc Taraması Başlatıldı");

    /*barValue=0;
    bar->show();
    bar->setValue(barValue);
    this->update();
    QTimer *barTimer = new QTimer(this);
    connect(barTimer, SIGNAL(timeout()), this, SLOT(barStatusSlot()));
    barTimer->start(1000);
*/

    QStringList arguments;
    QString  komut;
    //+" 'echo "+password->text()+" | sudo -S' "+
    komut.append("echo ").append(password->text()).append(" | sudo -S ").append("nmap  -n -p 5900 --open ").append("-iL "+QDir::homePath()+"/ip").append(" | awk '/Nmap scan report/{print $5;}'>"+QDir::homePath()+"/vnciplist");

   // qDebug()<<komut;
    arguments << "-c" << komut;
    //sudo nmap -n -sP 10.107.248.* | awk '/Nmap scan report/{printf "("; printf $5;printf ")";getline;getline;print $3}'>iplist
    // arguments << "-c" << "nmap  -sn 192.168.23.\\*";
    QProcess process;
    process.start("/bin/bash",arguments);
    process.waitForFinished(-1); // will wait forever until finished
    //QString stdout = process.readAllStandardOutput();
   // qDebug()<<"vnc Tarama Tamamlandı";
    mesajSlot("vnc Taraması Tamamlandı.");
    // hostListSaveButtonSlot();
    vncOpenSave();
    //hostTableListButtonSlot();
    //lst->hide();
    //tw->show();

    //barTimer->stop();
   // bar->hide();
    /*********************************************************/
listePcSlot();
}

void MainWindow::mesajSlot(QString msg)
{
    textBrowser_receivedMessages->moveCursor (QTextCursor::End);
    textBrowser_receivedMessages->insertPlainText (msg+"\n");

}

void MainWindow::hostTableListButtonSlot()
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplist";
    FileCrud *fcc=new FileCrud();
    fcc->dosya="iplistname";
    FileCrud *fcc1=new FileCrud();
    fcc1->dosya="ip";
    fcc1->fileRemove();
    //fc->fileRead();
   // qDebug()<<fc->fileCount();

/*********************************************************/
    //tw->setRowCount(fc->fileCount());
    int sira=1;
     tw->setRowCount(0);
    for(int i=1;i<=fc->fileCount();i++)
    {

        QString line=fc->fileGetLine(i);
        QStringList lst=line.split("|");
        QString ip = lst[0];
        QString mac = lst[1];
       // qDebug()<<line;

         if(mac!="")
         {

         fcc1->fileWrite(ip); //ip liste         dosyası oluşturuluyor
         tw->setRowCount(tw->rowCount()+1);
         tw->setItem(sira-1, 0, new QTableWidgetItem(QString::number(i)));
         tw->setItem(sira-1, 1, new QTableWidgetItem(ip));
         tw->setItem(sira-1, 2, new QTableWidgetItem(mac));
         tw->setItem(sira-1, 3, new QTableWidgetItem("pcopen"));
         tw->setItem(sira-1, 4, new QTableWidgetItem("sshclose"));
         tw->setItem(sira-1, 5, new QTableWidgetItem("vncclose"));
         tw->setItem(sira-1, 6, new QTableWidgetItem("??"));
         QString ln=fcc->fileSearch(mac);

         if(ln!="")
         {
            // qDebug()<<"bulundu";
         ln.chop(1);
         QStringList ls=ln.split("|");
             if(ls[5]!="")
             {
                 tw->setItem(sira-1, 6, new QTableWidgetItem(ls[5]));
             }
         }
         sira++;

         }
       // qDebug();
    }


//qDebug()<<"Listelendi";
    mesajSlot("Ağ Taraması Listelendi.");
}

void MainWindow::sshOpenSave()
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplist";
    FileCrud *fcc=new FileCrud();
    fcc->dosya="sshiplist";
    //fc->fileremove();
    FileCrud *fc1=new FileCrud();
    fc1->dosya="iplistname";
    FileCrud *fc2=new FileCrud();
    fc2->dosya="iplistname_";
    fc2->fileRemove();

    for(int i=1;i<=fc1->fileCount();i++)
     {
        QString line=fc1->fileGetLine(i);
        line.chop(1);
        if(line!="")
        {
        QStringList lst=line.split("|");
       fc2->fileWrite(lst[0]+"|"+lst[1]+"|" +lst[2]+"|" +"sshclose"+"|" +lst[4]+"|" +lst[5]);
        }
     }
    fc1->fileRemove();
    QFile file_(QDir::homePath()+"/"+"iplistname_");
    file_.rename(QDir::homePath()+"/"+"iplistname");
    fc2->fileRemove();

   for(int i=1;i<=fcc->fileCount();i++)
    {
         QString line=fcc->fileGetLine(i);
         line.chop(1);
         if(line!="")
         {
                 QString line1=fc->fileSearch(line);
                 line1.chop(1);
                 if(line1!="")
                 {
                     QStringList lst=line1.split("|");
                    // qDebug()<<line<<lst[1];
                    editRowColum(lst[1],3,"sshopen");
                 }
         }
    }

    //qDebug()<<"Açık ssh Servisleri Güncellendi!";
    mesajSlot("Açık ssh Servisleri Güncellendi!");
}

void MainWindow::vncOpenSave()
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplist";
    FileCrud *fcc=new FileCrud();
    fcc->dosya="vnciplist";
    //fc->fileremove();
    FileCrud *fc1=new FileCrud();
    fc1->dosya="iplistname";
    FileCrud *fc2=new FileCrud();
    fc2->dosya="iplistname_";
    fc2->fileRemove();

    for(int i=1;i<=fc1->fileCount();i++)
     {
        QString line=fc1->fileGetLine(i);
        line.chop(1);
        if(line!="")
        {
        QStringList lst=line.split("|");
       fc2->fileWrite(lst[0]+"|"+lst[1]+"|" +lst[2]+"|" +lst[3]+"|" +"vncclose"+"|" +lst[5]);
        }
     }
    fc1->fileRemove();
    QFile file_(QDir::homePath()+"/"+"iplistname_");
    file_.rename(QDir::homePath()+"/"+"iplistname");
    fc2->fileRemove();

   for(int i=1;i<=fcc->fileCount();i++)
    {
     QString line=fcc->fileGetLine(i);
     line.chop(1);
         if(line!="")
         {
                 QString line1=fc->fileSearch(line);
                 line1.chop(1);
                 if(line1!="")
                 {
                    QStringList lst=line1.split("|");
                    // qDebug()<<line<<lst[1];
                    editRowColum(lst[1],4,"vncopen");
                 }
         }
    }

   // qDebug()<<"Açık vnc Servisleri Güncellendi!";
   mesajSlot("Açık vnc Servisleri Güncellendi!");
}

void MainWindow::pcOpenSave()
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplist";
    FileCrud *fcc=new FileCrud();
    fcc->dosya="ip";
    //fc->fileremove();
    FileCrud *fc1=new FileCrud();
    fc1->dosya="iplistname";
    FileCrud *fc2=new FileCrud();
    fc2->dosya="iplistname_";
    fc2->fileRemove();

    for(int i=1;i<=fc1->fileCount();i++)
     {
        QString line=fc1->fileGetLine(i);
        line.chop(1);
        QStringList lst=line.split("|");
       fc2->fileWrite(lst[0]+"|"+lst[1]+"|" +"pcclose"+"|" +lst[3]+"|" +lst[4]+"|" +lst[5]);
     }
    fc1->fileRemove();
    QFile file_(QDir::homePath()+"/"+"iplistname_");
    file_.rename(QDir::homePath()+"/"+"iplistname");
    fc2->fileRemove();

   for(int i=1;i<=fcc->fileCount();i++) //ip file
    {
     QString line=fcc->fileGetLine(i);
     line.chop(1);
     if(line!="")
     {
     QString line1=fc->fileSearch(line);//iplist file search
     QStringList lst=line1.split("|");
    //  qDebug()<<line;
     editRowColum(lst[1],2,"pcopen");
        }
     }
    //qDebug()<<"Açık Bigisayarlar Güncellendi!";
   mesajSlot("Açık Bigisayarlar Güncellendi!");
}

void MainWindow::hostTableListSaveButtonSlot()
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplistname";



   for(int i=0;i<=tw->rowCount()-1;i++)
    {

        QString pcname;
        QString ip=tw->item(i, 1)->text();
        QString mac=tw->item(i, 2)->text();
        if(tw->item(i, 6))pcname=tw->item(i, 6)->text();
        else pcname="";

        //qDebug()<<ip<<mac<<pcname;
          QString ln=fc->fileSearch(mac);
          //ln.chop(1);
          //int mn=ln.lastIndexOf(QRegExp("\\<"));

          //QString pcname_=ln.mid(mn+1);

          if(ln!="") {
          //  qDebug()<<pcname_<<pcname<<mac<<"farklı yeni";
              //fc->fileEdit(fc->fileSearch(mac),ip+">"+mac+"<"+pcname);
              fc->fileDelete(mac);
          }


/****************************************************/

          for(int i=0;i<=tw->rowCount()-1;i++)
           {

               QString pcname;
               QString ip=tw->item(i, 1)->text();
               QString mac=tw->item(i, 2)->text();
               QString pcstate=tw->item(i, 3)->text();
               QString sshstate=tw->item(i, 4)->text();
               QString vncstate=tw->item(i, 5)->text();

               if(tw->item(i, 6)) pcname=tw->item(i, 6)->text();
               else pcname="";

               //qDebug()<<ip<<mac<<pcname;
                 QString ln=fc->fileSearch(mac);
                // ln.chop(1);
                 //int mn=ln.lastIndexOf(QRegExp("\\<"));
                 //QString pcname_=ln.mid(mn+1);

                 if(ln=="") {
                //  qDebug()<<"kayıt yok";
                        fc->fileWrite(ip+"|"
                                      +mac+"|"
                                      +pcstate+"|"
                                      +sshstate+"|"
                                      +vncstate+"|"
                                      +pcname);
                 }
              }


    }

    //qDebug()<<"Mac Listesi Kaydedildi!";
   mesajSlot("Mac Listesi Kaydedildi!");
    pcOpenSave();
}

void MainWindow::editRowColum(QString mac,int column,QString newdata )
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplistname";
            QString line=fc->fileSearch(mac);
            line.chop(1);
            if(line!="") {
            //qDebug()<<line;
            QStringList lst=line.split("|");
            fc->fileDelete(mac); //varsa siliniyor
            QString ln=fc->fileSearch(mac);
            ln.chop(1);
    if(ln=="") {
                //  qDebug()<<"kayıt yok";
    if (column==0)  fc->fileWrite(newdata+"|"+lst[1]+"|" +lst[2]+"|" +lst[3]+"|" +lst[4]+"|" +lst[5]);
    if (column==1)  fc->fileWrite(lst[0]+"|"+newdata+"|" +lst[2]+"|" +lst[3]+"|" +lst[4]+"|" +lst[5]);
    if (column==2)  fc->fileWrite(lst[0]+"|"+lst[1]+"|" +newdata+"|" +lst[3]+"|" +lst[4]+"|" +lst[5]);
    if (column==3)  fc->fileWrite(lst[0]+"|"+lst[1]+"|" +lst[2]+"|" +newdata+"|" +lst[4]+"|" +lst[5]);
    if (column==4)  fc->fileWrite(lst[0]+"|"+lst[1]+"|" +lst[2]+"|" +lst[3]+"|" +newdata+"|" +lst[5]);

                 }
            }
            else
            {
                FileCrud *fcc=new FileCrud();
                fcc->dosya="iplist";
                QString lnn=fcc->fileSearch(mac);
                lnn.chop(1);
        if(lnn!="") {
            QStringList ls1=lnn.split("|");

                fc->fileWrite(ls1[0]+"|"+ls1[1]+"|" +newdata+"|" +"sshclose"+"|" +"vncclose"+"|" +"??");
                qDebug()<<"geldin mi";
            }
            }

 // qDebug()<<"Liste Düzenlendi Kaydedildi!";
}
void MainWindow::editSocketRowColum(QString mac,int column,QString newdata,QString newPc )
{
    qDebug()<<"gelen bilgi"<<newPc;
    FileCrud *fc=new FileCrud();
    fc->dosya="iplist";
   //fc->fileRemove();
            QString line=fc->fileSearch(mac);
            line.chop(1);
            if(line!="") {
            //qDebug()<<line;
            QStringList lst=line.split("|");
            fc->fileDelete(mac); //varsa siliniyor
            QString ln=fc->fileSearch(mac);
            ln.chop(1);
    if(ln=="") {
                //  qDebug()<<"kay?t yok";
        QStringList pclist=newPc.split("|");
      if (column==2)  fc->fileWrite(pclist[1]+"|"+pclist[2]+"|" +newdata+"|" +lst[3]+"|" +lst[4]+"|" +lst[5]+"|" +pclist[3]);

                 }
            }
            else
            {
                if(newPc!="")
                {
                QStringList lst1=newPc.split("|");

              fc->fileWrite(lst1[1]+"|"+lst1[2]+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +"??"+"|" +lst1[3]);
                }
            }
 // qDebug()<<"Liste Düzenlendi Kaydedildi!";
}

void MainWindow::macListeSlot()
{


    lst->hide();
    tw->show();

    //FileCrud *fc=new FileCrud();
   // fc->dosya="iplist";
    //fc->fileRead();
   // qDebug()<<fc->fileCount();
    FileCrud *fcc=new FileCrud();
    fcc->dosya="iplistname";

/*********************************************************/
   int sira=0;
   tw->setRowCount(0);
    for(int i=1;i<=fcc->fileCount();i++)
    {
        QString line=fcc->fileGetLine(i);
        line.chop(1);
        //int mx=line.lastIndexOf(QRegExp("\\>"));      // returns (
        //nt mn=line.lastIndexOf(QRegExp("\\<"));      //returns  )
        QStringList lst=line.split("|");
      /*  QString ip = lst[0];
        QString mac = lst[1];
        QString pcname=lst[5];
         */
         tw->setRowCount(tw->rowCount()+1);
        /* QString ln=fcc->fileSearch(mac);
         ln.chop(1);
         int mn=ln.lastIndexOf(QRegExp("\\<"));
         QString pcname=ln.mid(mn+1);
         */
         //qDebug()<<lst;
        //qDebug()<<"ip="<<ip<<"mac="<<mac;
         tw->setItem(sira, 0, new QTableWidgetItem(QString::number(i)));
         tw->setItem(sira, 1, new QTableWidgetItem(lst[0]));//ip
         tw->setItem(sira, 2, new QTableWidgetItem(lst[1]));//mac
         tw->setItem(sira, 3, new QTableWidgetItem(lst[2]));//pcstate
         tw->setItem(sira, 4, new QTableWidgetItem(lst[3]));//sshstate
         tw->setItem(sira, 5, new QTableWidgetItem(lst[4]));//vncstate
         tw->setItem(sira, 6, new QTableWidgetItem(lst[5]));//pcname
         sira++;

       // qDebug();
    }
    //qDebug()<<"Mac Listelendi";
    mesajSlot("Mac Adresleri Listelendi.");
}
//fish://etapadmin@10.107.248.233/home/etapadmin/
void MainWindow::ftpConnectButtonSlot()
{
    /*QProcess *Process = new QProcess();
           QString exec = "konsole";
           // QString exec = "dolphin";
           QStringList params;
           params <<"ls";
           Process->execute(exec,params);*/


    QStringList arguments;
    QString  komut;
    komut.append("dolphin fish://").append(username->text()+":").append(password->text()).append("@"+pcIp->text()+" &");
  // qDebug()<<komut;
     arguments << "-c" << komut;
    QProcess process;
    process.start("/bin/bash",arguments);
    process.waitForFinished(-1); // will wait forever until finished
    //process.execute("vncviewer 192.168.23.253 \-passwd \/usr\/bin\/x11vncpasswd");
    //  vncviewer 192.168.23.253 -passwd /usr/bin/x11
//*qDebug()<<arguments;*/
//vncviewer 192.168.23.253
}
void MainWindow::vncConnectButtonSlot()
{
    /*QProcess *Process = new QProcess();
           QString exec = "konsole";
           // QString exec = "dolphin";
           QStringList params;
           params <<"ls";
           Process->execute(exec,params);*/


    QStringList arguments;
    QString  komut;
    komut.append("vncviewer ").append(pcIp->text()).append(" \-passwd \/usr\/bin\/x11vncpasswd");
    arguments << "-c" << komut;
    QProcess process;
    process.start("/bin/bash",arguments);
    process.waitForFinished(-1); // will wait forever until finished
    //process.execute("vncviewer 192.168.23.253 \-passwd \/usr\/bin\/x11vncpasswd");
    //  vncviewer 192.168.23.253 -passwd /usr/bin/x11
//*qDebug()<<arguments;*/
//vncviewer 192.168.23.253
}
void MainWindow::createTable()
{
    tw=new QTableWidget(this);
    tw->resize(900,this->height()-355);
    tw->move(0,200);

    tw->setColumnCount(7);
    tw->setRowCount(0);
    tw->setColumnWidth(0, 50);
    tw->setColumnWidth(1, 120);
    tw->setColumnWidth(2, 150);
    tw->setColumnWidth(3, 80);
    tw->setColumnWidth(4, 80);
    tw->setColumnWidth(5, 80);
    tw->setColumnWidth(6, 200);
    //QTableWidgetItem *newItem = new QTableWidgetItem(tr("%1").arg((3)*(1)));
    //QTableWidgetItem *newItem = new QTableWidgetItem("deneme");
    //tw->setItem(1, 2, newItem);
 /*   tw->setItem(0, 0, new QTableWidgetItem("bayram"));
    tw->setItem(0, 1, new QTableWidgetItem("karahan"));
    tw->setItem(0, 2, new QTableWidgetItem("30"));

*/
    tw->setHorizontalHeaderItem(0, new QTableWidgetItem("Sıra"));
    tw->setHorizontalHeaderItem(1, new QTableWidgetItem("İp Adres"));
    tw->setHorizontalHeaderItem(2, new QTableWidgetItem("Mac Adres"));
    tw->setHorizontalHeaderItem(3, new QTableWidgetItem("Durum"));
    tw->setHorizontalHeaderItem(4, new QTableWidgetItem("ssh"));
    tw->setHorizontalHeaderItem(5, new QTableWidgetItem("vnc"));
    tw->setHorizontalHeaderItem(6, new QTableWidgetItem("Pc Adı"));



    //tw->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled);

    //connect( tw, SIGNAL( cellPressed(int, int)), this, SLOT( changeLocalSongData( int, int )));
    tw->setSelectionBehavior(QAbstractItemView::SelectRows);
    tw->setSelectionMode(QAbstractItemView::SingleSelection);
    //connect(tw, &QTableWidget::cellClicked, this, cellClicked());
    connect(tw, SIGNAL(cellDoubleClicked(int,int)),SLOT(cellDoubleClicked(int,int)));
    connect(tw, SIGNAL(cellClicked(int ,int)), SLOT(cellClicked(int ,int)));
    // connect(tw, SIGNAL(sectionClicked(int)), this, SLOT(my_slot(int)));



}
void MainWindow::cellDoubleClicked(int iRow, int iColumn)
{
    FileCrud *fc=new FileCrud();
    fc->dosya="iplistname";
    QString mac= tw->item(iRow, 2)->text();
    QString ln=fc->fileSearch(mac);
    ln.chop(1);
    if(ln!="") {
        fc->fileDelete(mac);
        mesajSlot("Bilgisayar Listeden Silindi!");
        macListeSlot();
    }

    //tw->removeRow(tw->currentIndex().row());

//listePc();
  /*  */
   /* QProcess myProcess;
    QString program = "arp";
    QStringList arguments;
    arguments << "-a"<<"|>>/home/by/iplist";
    myProcess.start(program, arguments);
    myProcess.waitForFinished();
    QByteArray result = myProcess.readAllStandardOutput ();
    const QString all(result);
*/

   /*
*/

    /******************ping **************************/
   /* QStringList arguments;
        arguments << "-c" << "ping 192.168.43.108 -c 2|tail -6|head -1|awk '{print $1}'";
        QProcess process;
        process.start("/bin/bash",arguments);
        process.waitForFinished(-1); // will wait forever until finished
        QString stdout = process.readAllStandardOutput();
        stdout.chop(1);

        if(stdout!="64")
            qDebug()<<"erişilemiyor";
        else
            qDebug()<<"erişiliyor";
*/

   /* if((fc->fileexists()))
     {
         QString strmyPenAlpha=fc->fileSearch("192.168.43.3");strmyPenAlpha.chop(1);
         QStringRef _strmyPenAlpha=strmyPenAlpha.rightRef(strmyPenAlpha.length()-11);
         qDebug()<<_strmyPenAlpha;
    }*/

   /*QList<QNetworkInterface> list = QNetworkInterface::allInterfaces(); // now you have interfaces list
    foreach (QNetworkInterface iface, list)  // this should print all interfaces' names
    {
        qDebug() << iface.name();
    }*/

    /*QList<QNetworkInterface> interfaces = QNetworkInterface::allInterfaces();
    for(int i=0; i<interfaces.count(); i++)
    {
    QList<QNetworkAddressEntry> entries = interfaces.at(i).addressEntries();
    for(int j=0; j<entries.count(); j++)
    {
    if(entries.at(j).ip().protocol() == QAbstractSocket::IPv4Protocol)
    {
    qDebug() << entries.at(j).ip().toString();
    qDebug() << entries.at(j).netmask().toString();

    }
    }
     //qDebug() << "mac"<< interfaces.hardwareAddress().toString();
    }*/


   /* QTcpSocket socket;
    socket.connectToHost("8.8.8.8", 53); // google DNS, or something else reliable
    if (socket.waitForConnected()) {
        qDebug()
            << "local IPv4 address for Internet connectivity is"
            << socket.localAddress();
    } else {
        qWarning()
            << "could not determine local IPv4 address:"
            << socket.errorString();
    }
*/

    //qDebug()<<all;
//QNetworkInterface *ni=new QNetworkInterface();
 // tw->setRangeSelected(QTableWidgetSelectionRange(iRow, 0, iRow, tw->columnCount() - 1), 1);
}
void MainWindow::cellClicked(int row,int column)
{
    pcIp->setText(tw->item(row, 1)->text());
    if(tw->item(row, 3))
    {
  QString pcname=tw->item(row, 3)->text();

    pcName->setText(tw->item(row, 3)->text());
}
    pcMac->setText(tw->item(row, 2)->text());

  //    qDebug()<<row<<tw->item(row, 0)->text()<< tw->item(row, 1)->text()<<tw->item(row, 2)->text();
}
void MainWindow::my_slot(int row)
{

     qDebug()<< row;

}

MainWindow::~MainWindow()
{
    foreach (QTcpSocket* socket, connection_list)
    {
        socket->close();
        socket->deleteLater();
    }

    m_server->close();
    m_server->deleteLater();

    //delete ui;
}

void MainWindow::newConnection()
{
    while (m_server->hasPendingConnections())
        appendToSocketList(m_server->nextPendingConnection());
}

void MainWindow::appendToSocketList(QTcpSocket* socket)
{
     // socket->setSocketDescriptor(123456);
    connection_list.append(socket);
    qintptr id = (qintptr)&connection_list.last();
    qDebug()<<"Bağlantı Kuruldu:"<<id;
    connect(socket, SIGNAL(readyRead()), this , SLOT(readSocket()));
    connect(socket, SIGNAL(disconnected()), this , SLOT(discardSocket()));
   // comboBox_receiver->addItem(QString::number(socket->socketDescriptor()));
   //qDebug()<<"ip:"<< socket->peerAddress().toString().split(":")[3];
   QString ip=socket->peerAddress().toString().split(":")[3];

   //getMacForIP("192.168.43.1");
 //qDebug()<<"mac:"<<getMacForIP("192.168.43.1");
 QString mac=getMacForIP(ip);
 /*************************************************/
 // qDebug()<<str;
 // QStringList lst=str.split("|");
 // editSocketRowColum(lst[2],2,"pcopen",str );
  onLinePcList=listRemove(onLinePcList,mac);//önceden varsa siliniyor
  //qDebug()<<onLinePcList;
  /********************************************************/
  onLinePcList<<ip+"|"+mac+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +"??"+"|" +QString::number(socket->socketDescriptor())+"|"+QString::number(id);
  QStringList iplistname=fileToList("iplistname");  //liste olşturuluyor
  QString line=listGetLine(iplistname,mac); //değiştirilecek satır getiriliyor
  //qDebug()<<iplistname;
  if(line!="") //iplistname dosyasında varsa
  {
  QStringList lst1=line.split("|");
  iplistname=listRemove(iplistname,mac); //değişecek satır siliniyor
  iplistname<<ip+"|"+mac+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +lst1[5];
  listToFile(iplistname,"iplistname");
 // comboBoxDelete(lst1[5]);
  //comboBox_receiver->addItem(lst1[5]);

  }else
  {
      iplistname<<ip+"|"+mac+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +"??";
      listToFile(iplistname,"iplistname");
    //  comboBoxDelete("??");
     // comboBox_receiver->addItem("??");
  }
 /***************************************************/
   pcListeGuncelleSlot();
}

void MainWindow::readSocket()
{
     QTcpSocket* socket = reinterpret_cast<QTcpSocket*>(sender());

   QByteArray block = socket->readAll();
    QDataStream in(&block, QIODevice::ReadOnly);
    //in.setVersion(QDataStream::Qt_5_11);

    while (!in.atEnd())
    {
        QString receiveString;
        in >> receiveString;
        receiveString.prepend(QString("%1").arg(socket->socketDescriptor()));
        //nt fd = socket->socketDescriptor();
       // qDebug()<<fd;
       //receiveString.append("|"+socket->socketDescriptor());
        /********************************************************/
      //  QTcpSocket* socket = reinterpret_cast<QTcpSocket*>(sender());

        for (int i=0;i<connection_list.size();i++)
        {
          //   qintptr de =  socket;
           // qDebug()<<"aaa"<<de;
            if (connection_list.at(i) == socket)
            {
                //receiveString.append("|"+QString::number(socket->socketDescriptor()));
                qintptr id = (qintptr)&connection_list.at(i);
               // int j = (int)id;
                receiveString.append("|"+QString::number(id));
               // qDebug()<<"bu bağlantıya mesaj geldi"<<id;
              //  connection_list.removeAt(i);
                break;
            }
        }
        /************************************************/
       emit newMessage(receiveString);
    }

  //  readData();

}

void MainWindow::discardSocket()
{
    QTcpSocket* socket = reinterpret_cast<QTcpSocket*>(sender());

    for (int i=0;i<connection_list.size();i++)
    {
      //   qintptr de =  socket;
       // qDebug()<<"aaa"<<de;
        if (connection_list.at(i) == socket)
        {

            //qDebug()<<"bayip:"<< socket->peerAddress().toString().split(":")[3];
            QString ip=socket->peerAddress().toString().split(":")[3];

            //getMacForIP("192.168.43.1");
          //qDebug()<<"mac:"<<getMacForIP("192.168.43.108");
         // QString mac=getMacForIP("192.168.43.1");

            /******************************************************/
            qintptr id = (qintptr)&connection_list.at(i);
            qDebug()<<"Bağlantı Kesildi:"<<id;
            QString ln=listGetLine(onLinePcList,QString::number(id)); //silinecek satır getiriliyor

            // qDebug()<<ln;
            if (ln!="")
            {
                QString mac=ln.split("|")[1];
                onLinePcList=listRemove(onLinePcList,mac);//onlinepclist listesinden siliniyor
                //QStringList oflinepc=line.split("|");
                QStringList iplistname=fileToList("iplistname");//iplistname listesi oluşturuldu
                //qDebug()<<iplistname;
                QString line=listGetLine(iplistname,mac); //değiştirilecek satır getiriliyor
                // qDebug()<<line;
                QStringList lst=line.split("|");
                iplistname=listRemove(iplistname,mac);//iplistname listesinden satır siliniyor
                //qDebug()<<lst;
                iplistname<<lst[0]+"|"+lst[1]+"|" +"pcclose"+"|" +"sshclose"+"|" +"vncclose"+"|" +lst[5];
                listToFile(iplistname,"iplistname"); //dosya kaydedildi
                //comboBoxDelete(lst[5]);//Combobox deletec listing
            }
            connection_list.removeAt(i);
           // pcAramaButtonSlot();
              pcListeGuncelleSlot();
            break;
        }
    }

    socket->deleteLater();
}

void MainWindow::sendMessageAllButtonSlot()
{
socketNumberLabel->setText("Broadcast");
destlabel->setText("Hedef(Broadcast)");
sendMessageButtonSlot();
}

void MainWindow::sendMessageButtonSlot()
{
    QString receiver = socketNumberLabel->text();

    if(receiver=="Broadcast")
    {
        foreach (QTcpSocket* socket,connection_list)
        {
            sendMessage(socket);
        }
    }
    else if(receiver!="")
    {
             foreach (QTcpSocket* socket,connection_list)
                {
                    if(socket->socketDescriptor() == receiver.toLongLong())
                    {
                       // qDebug()<<receiver.toLongLong();
                        sendMessage(socket);
                        break;
                    }
                }
        }
  lineEdit_message->clear();
}

void MainWindow::sendMessage(QTcpSocket* socket)
{
    if(socket)
    {
        if(socket->isOpen())
        {
            QString str = lineEdit_message->text();

            QByteArray block;
            QDataStream out(&block, QIODevice::WriteOnly);

            //out.setVersion(QDataStream::Qt_5_11);
            out << str;
            socket->write(block);
        }
        else
            QMessageBox::critical(this,"QTCPServer","Socket doesn't seem to be opened");
    }
    else
        QMessageBox::critical(this,"QTCPServer","Not connected");
}

void MainWindow::displayMessage(const QString& str)
{
    textBrowser_receivedMessages->append(str);
   /* QStringList st=str.split("|");
    if(st.count()>4&&st[3]!="") textBrowser_receivedMessages->append(st[3]);

        if(str!="")
        {
           // qDebug()<<str;
            QStringList lst=str.split("|");
           // editSocketRowColum(lst[2],2,"pcopen",str );
            onLinePcList=listRemove(onLinePcList,lst[2]);//önceden varsa siliniyor
            //qDebug()<<onLinePcList;
            /********************************************************/
           /* onLinePcList<<lst[1]+"|"+lst[2]+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +"??"+"|" +lst[0]+"|"+lst.last();
            QStringList iplistname=fileToList("iplistname");  //liste olşturuluyor
            QString line=listGetLine(iplistname,lst[2]); //değiştirilecek satır getiriliyor
            //qDebug()<<iplistname;
            if(line!="") //iplistname dosyasında varsa
            {
            QStringList lst1=line.split("|");
            iplistname=listRemove(iplistname,lst[2]); //değişecek satır siliniyor
            iplistname<<lst[1]+"|"+lst[2]+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +lst1[5];
            listToFile(iplistname,"iplistname");
           // comboBoxDelete(lst1[5]);
            //comboBox_receiver->addItem(lst1[5]);

            }else
            {
                iplistname<<lst[1]+"|"+lst[2]+"|" +"pcopen"+"|" +"sshclose"+"|" +"vncclose"+"|" +"??";
                listToFile(iplistname,"iplistname");
              //  comboBoxDelete("??");
               // comboBox_receiver->addItem("??");
            }*/

      //  }
//pcAramaButtonSlot();
        pcListeGuncelleSlot();

}

void MainWindow::comboBoxDelete(QString data)
{
    for(int i=0;i<comboBox_receiver->count();i++)
    {
        if (comboBox_receiver->itemText(i)!="Broadcast"&&comboBox_receiver->itemText(i)==data)
        {
        comboBox_receiver->removeItem(i);
        //comboBox_receiver->addItem(QString::number(socket->socketDescriptor()));
        }

    }
}
QStringList MainWindow::listRemove(QStringList list,QString data)
 {
     //QStringList list;
     //list << "bayram|sun" << "cloud" << "sun|elif" << "firi|rain";
     QRegularExpression re(data);
     for(int i=0;i<list.count();i++)if(list[i].contains(re)) list.removeAt(i);
     //qDebug()<<list;
     return list;
 }
QString MainWindow::listGetLine(QStringList list,QString data)
 {
     //QStringList list;
     //list << "bayram|sun" << "cloud" << "sun|elif" << "firi|rain";
     QRegularExpression re(data);
     for(int i=0;i<list.count();i++) if(list[i].contains(re)) return list[i];
     //qDebug()<<list;
     return "";
 }
QStringList MainWindow::fileToList(QString filename)
 {
    FileCrud *fcc=new FileCrud();
    fcc->dosya=filename;
    QStringList list;
    for(int i=1;i<=fcc->fileCount();i++)
    {
         QString line=fcc->fileGetLine(i);
         if(line!="")
         {
             line.chop(1);
             QStringList lst=line.split("|");
             list <<lst[0]+"|"+lst[1]+"|"+lst[2]+"|"+lst[3]+"|"+lst[4]+"|"+lst[5];
         }
    }
     //QStringList list;
     //list << "bayram|sun" << "cloud" << "sun|elf" << "firi|rain";
    // QRegularExpression re(data);
     //for(int i=0;i<list.count();i++)if(list[i].contains(re)) list.removeAt(i);
     //qDebug()<<list;
     return list;
 }
void MainWindow::listToFile(QStringList list, QString filename)
 {
    FileCrud *fcc=new FileCrud();
    fcc->dosya=filename;
    //QStringList list;
    fcc->fileRemove();
    for(int i=0;i<list.count();i++)
    {
         QString line=list[i];
         if(line!="")
         {
             //line.chop(1);
             QStringList lst=line.split("|");
             //qDebug()<<line;
             fcc->fileWrite(lst[0]+"|"+lst[1]+"|"+lst[2]+"|"+lst[3]+"|"+lst[4]+"|"+lst[5]);
         }

    }
 }

void MainWindow::bilgiAlButtonSlot()
{
     QMessageBox::information(this,"E-Ağ 1.0",
                              "Bu uygulama etkileşimli tahtalarda kullanılmak üzere yazılmıştır."
                              "\n"
                              "\n Yapılabilecek Eylemler:"
                              "\n* Dosya Kopyalama"
                              "\n* Vnc Servisi Kurulu Bilgisayarlara Erişim"
                              "\n* Ssh Servisi Kurulu Bilgisayarlarda Komut Çalıştıma"
                              "\n* Ftp Servisi Kurulu Bilgisayarlara Dosya Yöneticisi İle Erişme"
                              "\n* Komutla Yapılabilen Bütün İşlemleri Yapma..."
                              "\n* Bireysel Yada Genel Mesajlar Gönderme Alma."
                              "\n"
                              "\n"
                              "\n\t         Bayram KARAHAN"
                              "\n\tBilişim Teknolojileri Öğretmeni"
                              "\n"
                              "\n"
                              "İstek ve önerileriniz için;"
                              "\nE-Posta: bayramk@gmail.com"
                              "\nwww.bayramkarahan.blogspot.com"
                              "\n");

    /*QMessageBox msgBox;
    msgBox.setText(str);
    msgBox.setStandardButtons(QMessageBox::Ok);msgBox.exec();
            QMessageBox::critical(this,"QTCPClient","Socket doesn't seem to be opened");

*/
}


QString MainWindow::getMacForIP(QString ipAddress)
{
    QString MAC="";
    QStringList arguments;
            arguments << "-c" << QString("arp -a %1|awk {'print $4'}").arg(ipAddress);
            QProcess process;
            process.start("/bin/bash",arguments);
           // process.waitForFinished(-1); // will wait forever until finished
            //QString stdout = process.readAllStandardOutput();

   // qDebug()<<ipAddress;
   // process.start(QString("arp -a %1|awk {'print $4'}").arg(ipAddress));
    //process.start(QString("arp \-a %1").arg(ipAddress));
     //qDebug()<<"deneme"<<QString("arp -a %1 | awk {'print $4'}").arg(ipAddress);
    if(process.waitForFinished())
    {
        //QString result = process.readAll();
       MAC = process.readAll();
       /* QStringList list = result.split(QRegularExpression("\\t"));
        if(list.contains(ipAddress))
            MAC = list.at(list.indexOf(ipAddress) + 1);*/
       // result.chop(1);
       MAC.chop(1);
    }
   // qDebug()<<"deneme:"<<MAC;
    return MAC;
}

